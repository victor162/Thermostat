/*	сохраняем данный файл в кодировке UTF-8		*/

//===================================================

//----- SPI2 parameter configuration ----------------------------------------

// SPI включаем только передача ( MOSI SCK )
// настройка SPI, скорость максимальная, 1 Line (TX only), Polarity High, Phase 2Edge:
// частота SPI должна быть меньше 50 МГц

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  
//-----------------------------------------------------------------------------



в файле fonts.h нужно выбрать шрифты:

//---- для экономии памяти шрифты которые не используються закоментировать -------------------------------------
			// Шрифт имеет кирилицу и латиницу
			#define FONT_6x8		//  6 x 8 pixels font size structure 
			#define FONT_7x9		//  7 x 9 pixels font size structure 
			#define FONT_11x18		//  11 x 18 pixels font size structure 
			#define FONT_16x26		//  16 x 26 pixels font size structure 
			// Только цифры -- only numbers
			#define FONT_16x28		//  16 x 28 pixels font size structure only numbers	
//--------------------------------------------------------------------------------------------------------------

в файле ST7789.h указываем настройки:

//#######  SETUP  ##############################################################################################
		
		//==== выбераем через что будем отправлять через HAL или CMSIS(быстрее) ==================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
			// указываем порт SPI для CMSIS ( быстро )-------
			// так как у разных МК разные регистры то в функциях корректируем под свой МК
			// на данный момент есть реализация на серию F1 F4 H7 для выбора серии в функциях
			//	void ST7789_SendCmd(uint8_t Cmd);
			//	void ST7789_SendData(uint8_t Data );
			//	void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size);	
			// комментируем и раскомментируем то что нам нужно, также там же редактируем под свой МК если не работает
			#define 	ST7789_SPI_CMSIS 	SPI2
			//-----------------------------------------------
			
			// указываем порт SPI для HAL ( медлено )--------
			//#define 	ST7789_SPI_HAL 		hspi2
			//-----------------------------------------------
			
		//============================================================================
		
		//=== указываем порты ( если в кубе назвали их DC RES CS то тогда нечего указывать не нужно )
		#if defined (DC_GPIO_Port)
		#else
			#define DC_GPIO_Port	GPIOA
			#define DC_Pin			GPIO_PIN_11
		#endif
		
		#if defined (RES_GPIO_Port)
		#else
			#define RES_GPIO_Port   GPIOA
			#define RES_Pin			GPIO_PIN_12
		#endif
		
		//--  Cесли используем порт CS для выбора устройства тогда раскомментировать ------------
		// если у нас одно устройство лучше пин CS притянуть к земле( или на порту подать GND )
		
		//#define CS_PORT
		
		//----------------------------------------------------------------------------------------
		#ifdef CS_PORT
			#if defined (CS_GPIO_Port)
			#else
				#define CS_GPIO_Port    GPIOA
				#define CS_Pin			GPIO_PIN_14
			#endif
		#endif
		
		//=============================================================================
		
		//==  выбираем дисплей: =======================================================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
		//#define	ST7789_IS_135X240		// 1.14" 135 x 240 ST7789 
		#define	ST7789_IS_240X240		// 1.3" 240 x 240 ST7789 		
		//#define	ST7789_IS_240X320		// 2" 240 x 320 ST7789
		
		//=============================================================================
		
		
//##############################################################################################################





//=========================================================


#include <ST7789.h>

#include "bitmap.h"
#include "fonts.h"


#include "stdio.h"
	.........
	.........

main()=============================================================================================================================
	
/////////////////////////////////////////////////////////////////////////////////////////////////////

	
	
	// включаем подсветку дисплея BLK
	// HAL_GPIO_WritePin( GPIOB, GPIO_PIN_1, GPIO_PIN_SET );

	// Процедура инициализации дисплея ST7789
	ST7789_Init();	

	for( uint8_t i = 1; i<5; i++){
	//-------------------------------	
		// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
		ST7789_rotation( i );

		// закрашиваем весь экран указаным цветом 
		ST7789_FillScreen( RGB565(0, 10, 100) );
		
		// прямоугольник пустотелый
		ST7789_DrawRectangle(0, 0, ST7789_Width-1, ST7789_Height-1, RGB565(255, 10, 50)) ;
		
		// печатаем символ ( один ) параметры: х,  у,  цвет символа, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сам символ
		ST7789_DrawChar( 20, 20, RGB565( 255, 255, 255 ) , RGB565( 0, 10, 10 ) , 0, &Font_16x26, 2, 'F' );
		
		HAL_Delay(1500);

	//--------------------------------
	}
	
	// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
	ST7789_rotation( 1 );

	// закрашиваем весь экран указаным цветом 
	ST7789_FillScreen( RGB565(0, 10, 100) );
	
	// прямоугольник пустотелый
	ST7789_DrawRectangle(0, 0, ST7789_Width-1, ST7789_Height-1, RGB565(255, 10, 50)) ;
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	// для кирилицы используем функцию utf8rus, если только латиница то можно без нее
	ST7789_print( 50, 20, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_16x26, 1, utf8rus("STM32 TFT") );
	// незабываем каждый раз после вызова функции utf8rus() освобождать память
	// free( pText );	// освобождаем память выделенную в функции utf8rus() посредством malloc();
	free( pText );
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	// для кирилицы используем функцию utf8rus, если только латиница то можно без нее
	ST7789_print( 10, 160, RGB565(255, 0, 0) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, utf8rus("Классный дисплей !!!") );
	// незабываем каждый раз после вызова функции utf8rus() освобождать память
	// free( pText );	// освобождаем память выделенную в функции utf8rus() посредством malloc();
	free( pText );
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	// для кирилицы используем функцию utf8rus, если только латиница то можно без нее
	ST7789_print( 8, 200, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_7x9, 2, utf8rus("ST7789 : 240x240") );
	// незабываем каждый раз после вызова функции utf8rus() освобождать память
	// free( pText );	// освобождаем память выделенную в функции utf8rus() посредством malloc();
	free( pText );
	
	// очистка экрана - закрашивает экран цветом черный
	// ST7789_Clear();
	
	// рисуем монохромную иконку. параметры координаты х и у, имя иконки ( массив ), размер иконки шир и выс, цвет отображения
	// ST7789_DrawBitmap( 60, 120, logo, 128, 27, RGB565(255, 0, 0) );
		
	// рисуем цветную иконку. параметры координаты х и у, размер иконки шир и выс, имя иконки ( массив )
	ST7789_DrawImage( 80, 65, 85, 80, logoRGB );

	// круг пустотелый
	//ST7789_DrawCircle(100, 100, 50, RGB565(255, 0, 255));

	// круг закрашеный
	//ST7789_DrawCircleFilled(200, 200, 20, RGB565(255, 40, 255)) ;

	// линия
	ST7789_DrawLine(1, 238, 239, 238, RGB565(255, 255, 0));
	
	// Процедура окрашивает 1 пиксель дисплея
	//ST7789_DrawPixel(0, 0, RGB565(255, 255, 50));

	// прямоугольник закрашеный
	//ST7789_DrawRectangleFilled(70, 200, 100, 20, RGB565(0, 255, 0)) ;
	
	// прямоугольник пустотелый
	//ST7789_DrawRectangle(0, 0, 134, 239, RGB565(0, 255, 50)) ;
	//ST7789_DrawRectangle(0, 0, 239, 134, RGB565(0, 255, 50)) ;
		
	// рисуем треугольник пустотелый
	//ST7789_DrawTriangle(20, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );

	// рисуем треугольник закрашеный
	//ST7789_DrawFilledTriangle(20, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );		

	// переход в спящий режим
	//ST7789_SleepModeEnter();

	// выход их спящего режима
	//ST7789_SleepModeExit();
	
	// вкл/выкл дисплея 0-выкл 1- вкл
	//ST7789_DisplayPower( 1 );

	// инверсия цветов 0-вкл  1-выкл
	//ST7789_InversionMode(1);
	
	// в бесконечном цикле выводим цисла от 0 до 255******************
	for(uint8_t i = 0; i<=255; i++){
		
		char str[3];
		
		sprintf(str,"%4d", i);	// выврдим три разряда, если число имеет один разряд то другие два будут пробелами
		
		// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
		ST7789_print( 60, 260, RGB565(0, 255, 0) , RGB565(0, 10, 100) , 1, &Font_7x9, 3, str );
		
		HAL_Delay(50);
	}
	//****************************************************************
	
	
///////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	.........
	.........
	.........

while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
